#! /usr/bin/env ruby

# xvim - raise xterms with vim with a specific file
# Copyright (C) 2018  Benjamin Herr
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

def run_urxvt(*cmd)
  spawn("urxvt", "-e", *cmd,
    pgroup: true,
    in: "/dev/null",
    out: "/dev/null",
  )
end

require 'timeout'
require 'open3'
require 'time'

VIM_MINUS_R_OUTPUT_LINES = {
  /^\s*owned by: (.*?)\s+dated: (.*)$/ => [:owner, :date],
  /^\s*file name: (.*)$/ => [:file],
  /^\s*modified: (.*)$/ => [:modified],
  /^\s*user name: (.*?)\s+host name: (.*)$/ => [:user, :host],
  /^\s*process ID: (\d+)(?:\s+\((still running)\)|())$/i => [:pid, :running],
}

class SwapFile < Struct.new(:swap, *VIM_MINUS_R_OUTPUT_LINES.values.flatten, :cwd, :crashed); end

def get_vim_swap_files()
  out, err, status = Timeout.timeout(3) do Open3.capture3("vim", "-r") end
  raise "vim -r exit status: #{status}\n#{err}" unless status.success?

  dir = nil
  swap_files = []
  cur = nil
  # if you put newlines into your filenames you only have yourself to blame
  err.each_line do |line|
    line.chomp!
    next if line.empty?
    if m = /^   In directory (.*?):$/.match(line)
      dir = m.captures.first
      if cur
        swap_files << cur
        cur = nil
      end
    elsif m = /^   In current directory:$/.match(line)
      dir = "."
      if cur
        swap_files << cur
        cur = nil
      end
    elsif /^\s*-- none --$/.match(line)
      raise "should have dir" unless dir
      dir = nil
      raise "shouldn't have cur" if cur
      next
    elsif m = /^\d+\.\s+(.*)/.match(line)
      raise "should have dir" unless dir
      swap_files << cur if cur
      cur = SwapFile.new
      cur.swap = "#{dir}/#{m.captures.first}"
    elsif cur
      ok = VIM_MINUS_R_OUTPUT_LINES.each do |re, syms|
        next unless m = re.match(line)

        [syms, m.captures.compact].transpose.each do |k, v|
          cur[k] = v
        end

        break true
      end
      raise "weird line: #{line.inspect}" unless ok
    end
  end

  swap_files << cur if cur

  home = ENV["HOME"]
  if !home && user = ENV["USER"]
    home = "/home/#{ENV["USER"]}"
  end
  home += "/"

  uptime = File.read("/proc/uptime").split(/\s/, 2).first.to_f
  boot_time = Time.now - uptime
  swap_files.each do |s|
    s.swap = File.expand_path(s.swap)
    s.date = Time.parse(s.date)
    s.file = nil if s.file == "[No Name]"
    s.file &&= maybe_realpath(File.expand_path(s.file))
    s.modified = s.modified == "YES"
    s.pid = s.pid.to_i
    s.running = s.running \
      && !s.running.empty?
      #&& File.read("/proc/#{s.pid}/cmdline").match(%r{^(?:[^\0]*/)?vim(?:\0|\$)})

    if s.date < boot_time
      s.crashed = true
      s.running = false
    end
    s.cwd = s.running && File.readlink("/proc/#{s.pid}/cwd")
  end

  swap_files
end

def maybe_realpath(f)
  return File.realpath(f) if File.exist?(f)
  f
end

def foreground(file, s)
  window_id = File.read("/proc/#{s.pid}/environ").split("\0").find{|l|l.start_with?("WINDOWID=")}.split("=", 2).last.to_i
  label = "process #{s.pid} for window #{window_id}"
  unless system("wmctrl", "-i", "-a", window_id.to_s, err: "/dev/null")
    STDERR.puts "#{file}: wmctrl failed to activate #{label}"
    return false
  end
  #STDERR.puts "#{file}: activated #{label}"
  true
end

def contains(dir, path, recursive)
  if recursive
    dir += "/" unless dir.end_with?("/")
    path.start_with?(dir)
  else
    File.dirname(path) == dir
  end
end

def matches_path(recursive, arg, s)
  f = File.expand_path(arg)
  r = maybe_realpath(f)

  if s.file && s.file == r
    STDERR.puts "#{arg}: found #{s.file}"
    return true
  end

  if File.directory?(f)
    # given path contains file or vim cwd
    # TODO: is vim cwd gonna be annoying? put behind flag?
    [f, r].each do |path|
      if s.file && contains(path, s.file, recursive)
        STDERR.puts "#{arg} contains file #{s.file}"
        return true
      elsif contains(path, "#{s.cwd}/.", recursive)
        # ^^^^ append /. to ward off dirname ^^^^
        msg = "#{arg} contains cwd #{s.cwd}"
        msg << " for file #{s.file}" if s.file
        STDERR.puts msg
        return true
      end
    end
  end

  false
end

def matches_glob(arg, s)
  return unless s.file

  [arg, "**/#{arg}"].any? { |f|
    if File.fnmatch(f, s.file, File::FNM_EXTGLOB | File::FNM_PATHNAME)
      STDERR.puts "#{f}: matches #{s.file}"
      true
    end
  }
end

def extract_file_line(s)
  patterns = [
    # gcc:  "foo.c:15:8: blah blah" (probably other tools too)
    /^([^\s:]+):(\d+):/,
    # grep: "foo:blahblah" (this one kinda sucks)
    /^([^\s:]+):/,
    # rustc: "  --> foo.rs:42:3"
    /^\s*--> ([^:]+):(\d+)\b/,
    # git: "	both modified:   blah"
    /^\tboth modified:\s*(.*)()/,
  ]
  patterns.each do |pattern|
    m = pattern.match(s)
    next unless m
    f, l = m.captures
    return f, l.to_i # "" -> 0
  end
  nil
end

recursive = ARGV.delete("-r")
glob = ARGV.delete("-g")
line = ARGV.delete("-l")

if ARGV.empty?
  run_urxvt "vim"
  exit
end

# exit before here so we skip opening a vim if there's nothing on stdin
error_lines = ARGV.delete("-L")

swap_files = get_vim_swap_files()

swap_files.delete_if { |s|
  if s.crashed
    STDERR.puts "note: swap file \"#{s.swap}\" for path \"#{s.file}\", pid #{s.pid} predates last boot"
  end
  !s.running
}

args = ARGV.dup

if line
  args.each_with_index do |a, i|
    parts = a.reverse.split(':', 3).map{|s| s.reverse}.reverse
    args[i] = parts[0..1] if parts.length > 1
  end
end

if error_lines
  errors = {}
  STDIN.each_line do |line|
    f, l = extract_file_line(line)
    next unless l
    prev_l = errors[f]
    errors[f] = l if !prev_l || prev_l > l
  end
  errors.each do |f, l|
    next unless File.file?(f)
    args << [f, l]
  end
end

args.delete_if { |f, l|
  ok = false
  swap_files.delete_if { |s|
    if glob && matches_glob(f, s)
      ok = true if foreground(f, s)
    elsif matches_path(recursive, f, s)
      ok = true if foreground(f, s)
    end
  }
  ok
}

args.each { |f, l|
  if glob
    STDERR.puts "no match for #{f}"
    next
  elsif File.directory?(f) && f.end_with?("/")
    STDERR.puts "not opening fresh vim for #{f}"
    next
  end

  puts "opening #{f}" if glob || error_lines

  if l
    run_urxvt "vim", "+#{l}", f
  else
    run_urxvt "vim", f
  end
}
